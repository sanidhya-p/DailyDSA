#include<iostream>
using namespace std;
void merge(int arr[],int s, int e){
    int mid= (s+e)/2;
        
    int len1= mid-s+1;
    int len2= e-mid;

    int *first= new int[len1];
    int *second= new int[len2];

    int mainArrayIndex=s;
    for (int  i = 0; i < len1; i++)
    {
        first[i]=arr[mainArrayIndex++];
    }
    mainArrayIndex=mid+1;
    for (int  i = 0; i < len2; i++)
    {
        second[i]=arr[mainArrayIndex++];
    }

    int firstindex =0;
    int secondindex=0;
    mainArrayIndex=s;
    
    while (firstindex<len1 && secondindex<len2)
    {
        if (first[firstindex]>second[secondindex])
        {
            arr[mainArrayIndex++]=second[secondindex++];
        }
        else{
            arr[mainArrayIndex++]=first[firstindex++];
        }
        
    }
    while (firstindex<len1)
    {
        arr[mainArrayIndex++]=first[firstindex++];
    }
    while (secondindex<len2)
    {
        arr[mainArrayIndex++]=second[secondindex++];
    }
    delete[]first;
    delete[]second;   
}



void mergesort(int arr[], int s, int e){
    //  base case
    if (s>=e)
    {
        return;
    }
    int mid= s+(e-s)/2;
    // sorting left part
    mergesort(arr,s,mid);
    // sorting right part
    mergesort(arr,mid+1,e);

    merge(arr,s,e);
    

}
int main()
{
    int arr[5]={5,4,7,2,1};
    mergesort(arr,0,4);
    for (int i = 0; i < 5; i++)
    {
        cout<<arr[i]<<" ";
    }cout<<endl;
    
    return 0;
}
