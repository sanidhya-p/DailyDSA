class Solution{
    public:
    bool issafe(int x, int y, int n,vector<vector<int>> visited ,vector<vector<int>> &m ){
    if((x>=0 &&x<n)&& (y>=0 &&y<n) && m[x][y]==1 && visited[x][y]==0){
        return true;
    }
    else{    
     return false;
    }
}

    void solve(vector<vector<int>> &m,int n,vector<string> &ans,int x,
                int y, vector<vector<int>>visited,string path){
//     base  case
    if(x==n-1&&y==n-1){
        ans.push_back(path);
        return;
    }
    visited[x][y]=1;
//     D,L,R,U
    int newx=x+1;
    int newy=y;
    if(issafe(newx,newy,n,visited,m)){
        path.push_back('D');
        solve(m,n,ans,newx,newy,visited,path);
        path.pop_back();
    }
    
     newx=x;
     newy=y-1;
    if(issafe(newx,newy,n,visited,m)){
        path.push_back('L');
        solve(m,n,ans,newx,newy,visited,path);
        path.pop_back();
    }
    
    newx=x;
    newy=y+1;
    if(issafe(newx,newy,n,visited,m)){
        path.push_back('R');
        solve(m,n,ans,newx,newy,visited,path);
        path.pop_back();
    }
    
     newx=x-1;
    newy=y;
    if(issafe(newx,newy,n,visited,m)){
        path.push_back('U');
        solve(m,n,ans,newx,newy,visited,path);
        path.pop_back();
    }
    
    
    visited[x][y]=0;
    
}

    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
     vector<string>ans;
    if(m[0][0]==0){
        return ans;
    }
    int x=0;
    int y=0;
    vector<vector<int>> visited=m;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            visited[i][j]=0;
        }
    }
    string path="";
    solve(m,n,ans,x,y,visited,path);
    sort(ans.begin(),ans.end());
    return ans;
    
    }
};
https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
