#include <iostream>
#include <queue>
using namespace std;

class Node
{
public:
    int data;
    Node *left;
    Node *right;
    Node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

Node *buidTree(Node *root)
{
    cout << "Enter the data" << endl;
    int data;
    cin >> data;
    root = new Node(data);

    if (data == -1)
    {
        return NULL;
    }
    cout << "Enter data for left child" << endl;
    root->left = buidTree(root->left);

    cout << "Enter data for right child" << endl;
    root->right = buidTree(root->right);

    return root;
}

void levelOrderTraversal(Node *root)
{
    queue<Node *> q;
    q.push(root);
    q.push(NULL);

    while (!q.empty())
    {
        Node *temp = q.front();
        q.pop();
        if (temp == NULL)
        {
            cout << endl;
            if (!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            cout << temp->data << " ";
            if (temp->left)
            {
                q.push(temp->left);
            }
            if (temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}

void inorder(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void buildtreefromLevelorder(Node* &root){
    queue<Node*> q;
    cout<<"enter data for root"<<endl;
    int data;
    cin>>data;
    root= new Node(data);
    q.push(root);
    while(!q.empty()){
        Node*temp=q.front();
        q.pop();
        cout<<"enter data for left node of"<<temp->data<<endl;
        int leftD;
        cin>>leftD;

        if(leftD!=-1){
            temp->left=new Node(leftD);
            q.push(temp->left);
        }

        cout<<"enter data for right node of"<<temp->data<<endl;
        int rightD;
        cin>>rightD;

        if(rightD!=-1){
            temp->right=new Node(rightD);
            q.push(temp->right);
        }

    }
}
int main()
{
    Node *root = NULL;
    // root = buidTree(root);
    // levelOrderTraversal(root);
    // inorder(root);

    buildtreefromLevelorder(root);
    levelOrderTraversal(root);
    return 0;
}
