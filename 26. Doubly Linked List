#include<iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* prev;
    Node*next;
    Node(int data){
        this->data=data;
        this->next=NULL;
        this->prev=NULL;
    }
    ~Node(){
        int val=this->data;
        if (next!=NULL)
        {
            delete next;
            next=NULL;
        }
        cout << "Memory is free for data " << val<< endl;
    }
};

void print(Node* head){
    Node*temp=head;
    while (temp!=NULL)
    {
        cout<<temp->data<<"<->";
        temp=temp->next;
    }cout<<endl;  
}

void insertAtHead(Node*& head,int data){
    
    if (head==NULL)
    {
        Node*n = new Node(data);
        head=n;
    }
    else{
        Node*n = new Node(data);
        n->next=head;
        head->prev=n;
        head=n; 
    }
     
}
void insertAtTail(Node*& head,int data){
    
    if (head==NULL)
    {
        Node*n = new Node(data);
        head=n;
    }
    
    else{
        Node*n = new Node(data);
        Node*temp=head;
        while (temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=n;
        n->prev=temp;
    }
    
}

void deleteNode(Node *&head, int pos)
{

    if (pos == 1)
    {
        Node *temp = head;
        head = temp->next;
        temp->next->prev=NULL;
        temp->next = NULL;
        delete temp;
    }
    else
    {
        Node *curr = head;
        Node *pre = NULL;

        int count = 1;
        while (count < pos)
        {
            pre = curr;
            curr = curr->next;
            count++;
        }
         if(curr->next==NULL)
        {
            pre->next=curr->next;  // null
            curr->prev=NULL;
            delete curr;
            return ;
        }
        pre->next = curr->next;
        curr->next->prev=curr->prev;
        curr->prev=NULL;
        curr->next = NULL;
        
        delete curr;
    }
}


void insertAtPos(Node*& head, int pos,int d){
    if (pos == 1)
    {
        insertAtHead(head, d);
        return;
    }

    Node*temp=head;
    int count=1;

    while (count<pos-1)
    {
        temp=temp->next;
        count++;
    }
    
    if (temp->next== NULL)
    {
        insertAtTail(head, d);
        return;
    }
    Node*n=new Node(d);
    n->next=temp->next;
    temp->next->prev=n;
    temp->next=n;
    n->prev=temp;
}

int main()
{
    Node *N1=new Node(10);
    Node *head=N1;

    insertAtHead(head,20);
    print(head);
    insertAtTail(head,30);
    print(head);
    insertAtPos(head,4,88);
    print(head);
    deleteNode(head,4);
    print(head);
    return 0;
}
